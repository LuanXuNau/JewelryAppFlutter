import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';

class ProductService {
  final String baseUrl = APIConfig.baseUrl;

  void printBaseUrl() {
    print("üåê API Base URL: $baseUrl");
  }

  bool _isJsonResponse(http.Response response) {
    final contentType = response.headers['content-type'];
    return contentType != null && contentType.contains('application/json');
  }

  /// ‚úÖ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (c√≥ ph√¢n trang)
  Future<List<dynamic>> getAllProducts(int page, int pageSize) async {
    final url =
        Uri.parse('$baseUrl/api/products?page=$page&pageSize=$pageSize');
    print("üì° G·ªçi GET: $url");

    try {
      final response = await http.get(url, headers: APIConfig.defaultHeaders);
      print("üì• Tr·∫°ng th√°i: ${response.statusCode}");

      if (!_isJsonResponse(response)) {
        throw Exception("‚ùå Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
      }

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data is List ? data : [];
      } else {
        throw Exception("‚ùå L·ªói ${response.statusCode}");
      }
    } catch (e) {
      throw Exception("‚ùå L·ªói k·∫øt n·ªëi API: $e");
    }
  }

  /// ‚úÖ L·∫•y s·∫£n ph·∫©m li√™n quan theo categoryId
  Future<List<dynamic>> getRelatedProducts(String categoryId) async {
    final url = Uri.parse('$baseUrl/api/products/category/$categoryId?limit=4');

    try {
      final response = await http.get(url, headers: APIConfig.defaultHeaders);

      if (!_isJsonResponse(response)) {
        throw Exception("‚ùå Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
      }

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('‚ùå L·ªói ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('‚ùå L·ªói k·∫øt n·ªëi API: $e');
    }
  }

  /// ‚úÖ L·∫•y s·∫£n ph·∫©m theo lo·∫°i
  Future<Map<String, dynamic>> getProductsByCategory(
      String categoryId, int page, int pageSize) async {
    final url = Uri.parse(
        '$baseUrl/api/products/category/$categoryId?page=$page&pageSize=$pageSize');

    try {
      final response = await http.get(url, headers: APIConfig.defaultHeaders);

      if (!_isJsonResponse(response)) {
        throw Exception("‚ùå Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
      }

      if (response.statusCode == 200) {
        return {'success': true, 'data': json.decode(response.body)};
      } else {
        return {'success': false, 'message': 'L·ªói ${response.statusCode}'};
      }
    } catch (e) {
      return {'success': false, 'message': '‚ùå L·ªói k·∫øt n·ªëi API: $e'};
    }
  }

  /// ‚úÖ T√¨m ki·∫øm s·∫£n ph·∫©m
  Future<Map<String, dynamic>> searchProducts(String keyword) async {
    final url = Uri.parse('$baseUrl/api/products/search?keyword=$keyword');

    try {
      final response = await http.get(url, headers: APIConfig.defaultHeaders);

      if (!_isJsonResponse(response)) {
        throw Exception("‚ùå Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
      }

      if (response.statusCode == 200) {
        return {'success': true, 'data': json.decode(response.body)};
      } else {
        return {'success': false, 'message': 'L·ªói ${response.statusCode}'};
      }
    } catch (e) {
      return {'success': false, 'message': '‚ùå L·ªói k·∫øt n·ªëi API: $e'};
    }
  }

  /// ‚úÖ L·∫•y s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
  Future<Map<String, dynamic>> getProductsByBrand(
      String brandId, int page, int pageSize) async {
    final url = Uri.parse(
        '$baseUrl/api/products/brand/$brandId?page=$page&pageSize=$pageSize');

    try {
      final response = await http.get(url, headers: APIConfig.defaultHeaders);

      if (!_isJsonResponse(response)) {
        throw Exception("‚ùå Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
      }

      if (response.statusCode == 200) {
        return {'success': true, 'data': json.decode(response.body)};
      } else {
        return {'success': false, 'message': 'L·ªói ${response.statusCode}'};
      }
    } catch (e) {
      return {'success': false, 'message': '‚ùå L·ªói k·∫øt n·ªëi API: $e'};
    }
  }

  /// ‚úÖ L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
  Future<Map<String, dynamic>?> getProductById(String productId) async {
    final url = Uri.parse('$baseUrl/api/products/$productId');
    print("üîç G·ªçi API l·∫•y s·∫£n ph·∫©m theo ID: $url");

    try {
      final response = await http.get(url, headers: APIConfig.defaultHeaders);

      if (!_isJsonResponse(response)) {
        throw Exception("‚ùå Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
      }

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID: $productId");
        return null;
      }
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m: $e");
      return null;
    }
  }
}
